/* ============================================================================
 * FLEX LEXICAL ANALYZER FOR ENHANCED PROGRAMMING LANGUAGE (LAB 3)
 * ============================================================================
 * Enhanced version with additional features:
 * - More keywords (if, else, while, int)
 * - Comparison operators (>, >=, <, <=, ==)
 * - Type declarations (int)
 * ============================================================================ */

%option noyywrap  /* Tell flex we don't need yywrap() function */

%{
/* C CODE SECTION - This code is copied directly to the generated lexer */
#include "prog.tab.h"  /* Include header file generated by Bison */
%}

/* ============================================================================
 * REGULAR EXPRESSION DEFINITIONS
 * ============================================================================ */
delim [ \t\n]                                    /* Delimiters: space, tab, newline */
ws {delim}+                                      /* Whitespace: one or more delimiters */
digit [0-9]                                      /* Single digit 0-9 */
number {digit}+                                  /* Number: one or more digits */
us [_]                                           /* Underscore character */
letter [A-Za-z]                                  /* Letters: uppercase or lowercase */
id ({letter}|{us})({letter}|{us}|{digit})*      /* Identifier: starts with letter/underscore */

/* ============================================================================
 * LEXICAL RULES SECTION
 * ============================================================================ */
%%
{ws}     {}                           /* WHITESPACE: Ignore all whitespace */
{number} {return NUM;}                /* NUMBER: Return NUM token (note: no value conversion here) */
"if"     {return IF;}                 /* KEYWORD: Conditional statement */
"else"   {return ELSE;}               /* KEYWORD: Alternative branch for if */
"while"  {return WHILE;}              /* KEYWORD: Loop construct */
"int"    {return INT;}                /* KEYWORD: Integer type declaration */
{id}     {return ID;}                 /* IDENTIFIER: Variable names, function names */
"+"      {return ADD;}                /* OPERATOR: Addition */
"-"      {return SUB;}                /* OPERATOR: Subtraction */
"("      {return LP;}                 /* PUNCTUATION: Left parenthesis */
")"      {return RP;}                 /* PUNCTUATION: Right parenthesis */
"{"      {return LB;}                 /* PUNCTUATION: Left brace (block start) */
"}"      {return RB;}                 /* PUNCTUATION: Right brace (block end) */
"=="     {return EQUAL;}              /* COMPARISON: Equality (must come before single =) */
">"      {return GT;}                 /* COMPARISON: Greater than */
">="     {return GE;}                 /* COMPARISON: Greater than or equal */
"<"      {return LT;}                 /* COMPARISON: Less than */
"<="     {return LE;}                 /* COMPARISON: Less than or equal */
"="      {return ASSIGN;}             /* OPERATOR: Assignment */
";"      {return SEMI;}               /* PUNCTUATION: Statement terminator */
%%
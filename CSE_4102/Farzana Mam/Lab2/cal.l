/* ============================================================================
 * FLEX LEXICAL ANALYZER FOR SIMPLE CALCULATOR
 * ============================================================================
 * This file defines tokens (lexemes) that our calculator can recognize
 * Flex will generate C code (lex.yy.c) that can tokenize input text
 * ============================================================================ */

%option noyywrap  /* Tell flex we don't need yywrap() function (simplifies linking) */

%{
/* C CODE SECTION - This code is copied directly to the generated lexer */
#include "cal.tab.h"  /* Include header file generated by Bison (contains token definitions) */
%}

/* ============================================================================
 * REGULAR EXPRESSION DEFINITIONS
 * ============================================================================
 * These are named patterns we can reuse in our rules below
 * ============================================================================ */
delim [ \t\n]      /* Define 'delim' as space or tab,new line character */
ws {delim}+      /* Define 'ws' (whitespace) as one or more delimiter characters */
digit [0-9]      /* Define 'digit' as any single digit 0-9 */
number {digit}+  /* Define 'number' as one or more consecutive digits */

/* ============================================================================
 * LEXICAL RULES SECTION
 * ============================================================================
 * Pattern-Action pairs: when input matches pattern, execute the action
 * ============================================================================ */
%%
{ws}     {}                                    /* WHITESPACE: Match whitespace but do nothing (ignore it) */
{number} {printf("%d\n",yylval);yylval = atoi(yytext); return NUM;} /* NUMBER: Convert matched text to integer, store in yylval, return NUM token */
"+"      {return ADD;}                        /* PLUS: When we see '+', return ADD token to parser */
"-"      {return SUB;}                        /* MINUS: When we see '-', return SUB token to parser */

%%
/* ============================================================================
 * USER CODE SECTION
 * ============================================================================
 * Additional C functions can be defined here if needed
 * (Currently empty - all functionality is handled above)
 * ============================================================================ */
/* ============================================================================
 * FLEX LEXICAL ANALYZER FOR PROGRAMMING LANGUAGE CONSTRUCTS
 * ============================================================================
 * This lexer recognizes tokens for a simple programming language including:
 * - Keywords (if, while)
 * - Identifiers (variable names)
 * - Numbers, operators, and punctuation
 * ============================================================================ */

%option noyywrap  /* Tell flex we don't need yywrap() function */

%{
/* C CODE SECTION - This code is copied directly to the generated lexer */
#include "prog.tab.h"  /* Include header file generated by Bison */
%}

/* ============================================================================
 * REGULAR EXPRESSION DEFINITIONS
 * ============================================================================ */
delim [ \t\n]                                    /* Delimiters: space, tab, newline */
ws {delim}+                                      /* Whitespace: one or more delimiters */
digit [0-9]                                      /* Single digit 0-9 */
number {digit}+                                  /* Number: one or more digits */
us [_]                                           /* Underscore character */
letter [A-Za-z]                                  /* Letters: uppercase or lowercase */
id ({letter}|{us})({letter}|{us}|{digit})*      /* Identifier: starts with letter/underscore, followed by letters/underscores/digits */

/* ============================================================================
 * LEXICAL RULES SECTION
 * ============================================================================ */
%%
{ws}     {}                                      /* WHITESPACE: Ignore all whitespace */
{number} {yylval = atoi(yytext); return NUM;}   /* NUMBER: Convert to integer and return NUM token */
"if"     {return IF;}                           /* KEYWORD: Return IF token for 'if' keyword */
"while"  {return WHILE;}                        /* KEYWORD: Return WHILE token for 'while' keyword */
{id}     {return ID;}                           /* IDENTIFIER: Return ID token for variable names */
"+"      {return ADD;}                          /* OPERATOR: Addition */
"-"      {return SUB;}                          /* OPERATOR: Subtraction */
"("      {return LP;}                           /* PUNCTUATION: Left parenthesis */
")"      {return RP;}                           /* PUNCTUATION: Right parenthesis */
"{"      {return LB;}                           /* PUNCTUATION: Left brace (block start) */
"}"      {return RB;}                           /* PUNCTUATION: Right brace (block end) */
"=="     {return EQUAL;}                        /* OPERATOR: Equality comparison (must come before single =) */
"="      {return ASSIGN;}                       /* OPERATOR: Assignment */
";"      {return SEMI;}                         /* PUNCTUATION: Semicolon (statement terminator) */
%%